Title: Custom queries

----

Maincontent: [{"attrs":[],"columns":[{"blocks":[{"content":{"text":"<p>Below are a number of custom analysis queries that have been produced for BSBI. To use them you will need to add them to your copy of MapMate - instructions are provided on the right of this page, or you can watch the final video on the <u><a href=\"/@/page/DRmSY0XmpR4xtiVV\">Analysis page</a></u>.</p><p>Further custom queries can be found in Appendix B of the <u><a href=\"/@/page/fzx5iJ0mmOfdbUp5\">BSBI MapMate Book</a></u>. If you still can't find what you need try asking for help on the <u><a href=\"https://groups.io/g/mapmateusers\" target=\"_blank\">MapMate email group</a></u>. </p>"},"id":"0cce9dd4-9c0c-4616-b6a1-e336e76d4084","isHidden":false,"type":"text"},{"content":{"level":"h2","text":"<strong>How to install these custom queries </strong>"},"id":"9be39b18-26ff-4997-9a12-902a92337d9e","isHidden":false,"type":"heading"},{"content":{"text":"<ol><li>Find the query you wish to use in the list below.</li><li>Highlight and then copy the query title&nbsp;</li><li>Go to MapMate and use the normal method for creating customised queries: open the \"Analysis\" window, double-click on the \"User Queries\" sub-heading and choose &lt;new user query&gt;.&nbsp;</li><li>You will be prompted for a name; paste in the name you copied in step 2.</li><li>You will now see MapMate’s SQL window with two lines of text - delete all the text that is there.&nbsp;</li><li>Now return to this web page page and highlight the SQL text (the block of text that has statements beginning SELECT, FROM, WHERE etc.), and copy this text. NB that some of these queries are rather long, make sure you highlight all the text from the beginning up to and including the semicolon at the end.&nbsp;</li><li>Return to MapMate and paste the SQL text into the blank window.&nbsp;</li><li>Make sure you save the new query - click on the yellow folder icon at the top of the window.</li></ol>"},"id":"6a6f1826-1e29-4dfa-bec1-3abb68cce637","isHidden":false,"type":"list"},{"content":{"level":"h3","text":"Browse all records for a &lt;1km square&gt;"},"id":"9e19878c-2542-469e-94e6-14993d757526","isHidden":false,"type":"heading"},{"content":{"code":"PARAMETERS [Enter a 1km square] Text;\n\nSELECT Records.[_guk], [Taxa\\Default].Code, [Taxa\\Default].Taxon, [Taxa\\Default].Vernacular, [Sites\\Default].Name AS Site, [Sites\\Default].OSGridRef AS Gridref, IIf([Sites\\Default].ViceCounty>200,'H' & [Sites\\Default].ViceCounty-200,[Sites\\Default].ViceCounty) AS [Vice County], Records.Quantity & IIf([*Sex]<>'u',' ' & [*Sex],'') AS Quantity, IIf([Records].DateTo-[Records].Date<27,Format([Records].Date,\"dd mmm yyyy\"),IIf([Records].DateTo-[Records].Date>32,Format([Records].Date,\"yyyy\"),Format([Records].Date,\"mmm yyyy\"))) AS [Date], Recorders.Name AS Recorder, RecordStatus.Status, Records.Comment\n\nFROM (((((Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]) INNER JOIN Methods ON Records.[*Method] = Methods.[_guk]) INNER JOIN Recorders ON Records.[*Recorder] = Recorders.[_guk]) INNER JOIN TaxonStage ON Records.[*Stage] = TaxonStage.[_guk]) INNER JOIN RecordStatus ON Records.[*Status] = RecordStatus.[_guk]\n\nWHERE ([Sites].[OSGridref] Like [Enter a 1km square]) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '?' & Right([Enter a 1km square],2) & '?'))  Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '?' & Right([Enter a 1km square],2) & '?')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '??' & Right([Enter a 1km square],2) & '??')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '??' & Right([Enter a 1km square],2) & '??')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '???' & Right([Enter a 1km square],2) & '???')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '???' & Right([Enter a 1km square],2) & '???'))\n\nORDER BY [Taxa\\Default].Taxon;","language":"sql"},"id":"e745f20a-2f47-4634-a998-344e6b64fb6e","isHidden":false,"type":"code"},{"content":{"level":"h3","text":"Browse Records for a &lt;1km square&gt; in &lt;year&gt;"},"id":"598c2606-579a-4b34-9c35-2a010e0f4dd2","isHidden":false,"type":"heading"},{"content":{"code":"PARAMETERS [Enter a 1km square] Text, [Enter a Year] Text;\n\nSELECT Records.[_guk], [Taxa\\Default].Code, [Taxa\\Default].Taxon, [Taxa\\Default].Vernacular, [Sites\\Default].Name AS Site, [Sites\\Default].OSGridRef AS Gridref, IIf([Sites\\Default].ViceCounty>200,'H' & [Sites\\Default].ViceCounty-200,[Sites\\Default].ViceCounty) AS [Vice County], Records.Quantity & IIf([*Sex]<>'u',' ' & [*Sex],'') AS Quantity, IIf([Records].DateTo-[Records].Date<27,Format([Records].Date,\"dd mmm yyyy\"),IIf([Records].DateTo-[Records].Date>32,Format([Records].Date,\"yyyy\"),Format([Records].Date,\"mmm yyyy\"))) AS [Date], Recorders.Name AS Recorder, TaxonStage.Stage, Records.Comment FROM (((((Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]) INNER JOIN Methods ON Records.[*Method] = Methods.[_guk]) INNER JOIN Recorders ON Records.[*Recorder] = Recorders.[_guk]) INNER JOIN TaxonStage ON Records.[*Stage] = TaxonStage.[_guk]) INNER JOIN RecordStatus ON Records.[*Status] = RecordStatus.[_guk] WHERE ([Sites].[OSGridref] Like [Enter a 1km square]) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '?' & Right([Enter a 1km square],2) & '?')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '?' & Right([Enter a 1km square],2) & '?')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '??' & Right([Enter a 1km square],2) & '??')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '??' & Right([Enter a 1km square],2) & '??')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],3) & '???' & Right([Enter a 1km square],2) & '???')) Or ([Sites].[OSGridref] Like (Left([Enter a 1km square],4) & '???' & Right([Enter a 1km square],2) & '???')) AND ((Year([Records].[Date]))=Val([Enter a Year])) ORDER BY [Taxa\\Default].Taxon;","language":"text"},"id":"34e5d1f9-7693-4eeb-92e4-e861b795fcf6","isHidden":false,"type":"code"},{"content":{"text":"<p><em>Most standard queries don’t display the determiner. This modification will do so for the standard ‘browse all records’ query. The code added to make this work is shown in </em><strong><em>bold</em></strong><em> – note the additional brackets in the FROM clause. The same modification can be made to most standard queries (to adapt a standard query, right-click on its name in MapMate, and choose Save Query As. That will put a copy of the query into the User Queries section, and you can then edit the copy).</em></p>"},"id":"d56823e4-54fc-4396-b7ce-8b54515e5902","isHidden":false,"type":"text"},{"content":{"level":"h3","text":"Browse all Records showing determiner"},"id":"8b1df6d7-d4c4-4b1f-a46a-e2d7e747d712","isHidden":false,"type":"heading"},{"content":{"code":"SELECT Records.[_guk], [Taxa\\Default].Code AS Code, [Taxa\\Default].Taxon, [Taxa\\Default].Vernacular, [Sites\\Default].Name AS Site, [Sites\\Default].OSGridRef AS Gridref, IIf([Sites\\Default].ViceCounty>200,'H' & [Sites\\Default].ViceCounty-200,[Sites\\Default].ViceCounty) AS [Vice County], Records.Quantity & IIf([*Sex]<>'u',' ' & [*Sex],'') AS Quantity, IIf([Records].DateTo-[Records].Date<27,Format([Records].Date,\"dd mmm yyyy\"),IIf([Records].DateTo-[Records].Date>32,Format([Records].Date,\"yyyy\"),Format([Records].Date,\"mmm yyyy\"))) AS [Date], Recorders.Name AS Recorder, Recorders_1.Name AS Determiner, Methods.Method, TaxonStage.Stage, RecordStatus.Status, Records.Comment\n\nFROM ((((((Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]) INNER JOIN Methods ON Records.[*Method] = Methods.[_guk]) INNER JOIN Recorders ON Records.[*Recorder] = Recorders.[_guk]) INNER JOIN TaxonStage ON Records.[*Stage] = TaxonStage.[_guk]) INNER JOIN RecordStatus ON Records.[*Status] = RecordStatus.[_guk]) INNER JOIN Recorders AS Recorders_1 ON Records.[*Identifier] = Recorders_1.[_guk];","language":"text"},"id":"5edc1246-c3df-4c29-acd6-a778ef5395ee","isHidden":false,"type":"code"},{"content":{"text":"<p><em>To show the determiner only when different from recorder, in the SELECT clause replace:</em></p>"},"id":"9d7873c9-2664-4900-a8b1-dc259c7dc5c1","isHidden":false,"type":"text"},{"content":{"code":"Recorders_1.Name AS Determiner","language":"text"},"id":"2f61c02b-9b04-4541-b611-517e9a168cbd","isHidden":false,"type":"code"},{"content":{"text":"<p><em>with:</em></p>"},"id":"066ea472-7372-429e-8be9-8524ced8e8a7","isHidden":false,"type":"text"},{"content":{"code":"IIf([Recorders].[Name]<>[Recorders_1].[Name],[Recorders_1].[Name],\"\") AS Determiner","language":"text"},"id":"045cf179-b5a6-4e05-9086-9e5675a54f17","isHidden":false,"type":"code"},{"content":{"level":"h3","text":"Count Records by Hectad for &lt;year range&gt;"},"id":"e9baca27-24b1-4ef0-92d9-7c5238f4a020","isHidden":false,"type":"heading"},{"content":{"code":"PARAMETERS [From Year (yyyy)] Long, [To Year (yyyy)] Long;\n\nSELECT [Sites\\Default].[10kSquare], Count(Records.[_guk]) AS Records\n\nFROM (Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]\n\nWHERE (((Year([Date]))>=[From Year (yyyy)] And (Year([DateTo]))<=[To Year (yyyy)]))\n\nGROUP BY [Sites\\Default].[10kSquare]\n\nORDER BY [Sites\\Default].[10kSquare];","language":"text"},"id":"23d5cf8e-6025-4e8c-be6f-b64551f0ee8d","isHidden":false,"type":"code"},{"content":{"text":"<p><em>To count species by hectad (excluding duplicate records within the hectad) we need an intermediate query. It is of no particular use on its own, but the subsequent species count query is based on it. Because this query name is referred to in the next query, it is important that the name is entered exactly as shown:</em></p>"},"id":"02eefff2-ce83-4521-9312-64fe0f011df0","isHidden":false,"type":"text"},{"content":{"level":"h3","text":"Distinct 10k Taxa for &lt;year range&gt;"},"id":"abcd8d34-60d3-4b68-a785-7f5493d2aad8","isHidden":false,"type":"heading"},{"content":{"code":"PARAMETERS [From Year (yyyy)] Long, [To Year (yyyy)] Long;\n\nSELECT DISTINCT [Sites\\Default].[10kSquare], [Taxa\\Default].Taxon\n\nFROM (Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]\n\nWHERE (((Year([Date]))>=[From Year (yyyy)]) AND ((Year([DateTo]))<=[To Year (yyyy)]));","language":"text"},"id":"67ce80ce-5bbf-49c8-9480-df8ca89846e3","isHidden":false,"type":"code"},{"content":{"level":"h3","text":"Count Species by Hectad for &lt;year range&gt;"},"id":"4633580c-4644-41df-b791-cbe8472c5688","isHidden":false,"type":"heading"},{"content":{"code":"SELECT [C\\Distinct 10k Taxa for <year range>].[10kSquare], Count([C\\Distinct 10k Taxa for <year range>].Taxon) AS Species\n\nFROM [C\\Distinct 10k Taxa for <year range>]\n\nGROUP BY [C\\Distinct 10k Taxa for <year range>].[10kSquare]\n\nORDER BY [C\\Distinct 10k Taxa for <year range>].[10kSquare];","language":"text"},"id":"ee8fe6e4-eba1-4ba9-8a03-c5f13e8818bd","isHidden":false,"type":"code"},{"content":{"text":"<p><em>Note that if a date range has been entered, it is the start date that is tested. To use the end date, replace [Records].[Date] in the WHERE clause with [Records].[DateTo]:</em></p>"},"id":"56c6c3f7-f9b2-4629-89dd-4b2726d6d004","isHidden":false,"type":"text"},{"content":{"level":"h3","text":"Browse all Records for hybrids from &lt;year&gt;"},"id":"aaa1d564-aab2-4ec0-b563-fc10db4dace0","isHidden":false,"type":"heading"},{"content":{"code":"SELECT Records.[_guk], [Taxa\\Default].Code AS Code, [Taxa\\Default].Taxon, [Taxa\\Default].Vernacular, [Sites\\Default].Name AS Site, [Sites\\Default].OSGridRef AS Gridref, IIf([Sites\\Default].ViceCounty>200,'H' & [Sites\\Default].ViceCounty-200,[Sites\\Default].ViceCounty) AS [Vice County], Records.Quantity & IIf([*Sex]<>'u',' ' & [*Sex],'') AS Quantity, IIf([Records].DateTo-[Records].Date<27,Format([Records].Date,\"dd mmm yyyy\"),IIf([Records].DateTo-[Records].Date>32,Format([Records].Date,\"yyyy\"),Format([Records].Date,\"mmm yyyy\"))) AS [Date], Recorders.Name AS Recorder, Methods.Method, TaxonStage.Stage, RecordStatus.Status, Records.Comment\n\nFROM (((((Records INNER JOIN [Taxa\\Default] ON Records.[*Taxon] = [Taxa\\Default].[_guk]) INNER JOIN [Sites\\Default] ON Records.[*Site] = [Sites\\Default].[_guk]) INNER JOIN Methods ON Records.[*Method] = Methods.[_guk]) INNER JOIN Recorders ON Records.[*Recorder] = Recorders.[_guk]) INNER JOIN TaxonStage ON Records.[*Stage] = TaxonStage.[_guk]) INNER JOIN RecordStatus ON Records.[*Status] = RecordStatus.[_guk]\n\nWHERE ([Taxa\\Default].Taxon LIKE \"* x *\" OR [Taxa\\Default].Taxon LIKE \"X *\") AND (YEAR([Records].[Date]) >= [Enter Year (yyyy)])\n\nORDER BY [Taxa\\Default].Taxon;","language":"text"},"id":"c37a0041-6f8e-4adf-9bbe-f6fd3433b084","isHidden":false,"type":"code"},{"content":{"text":"<p><em>This query doesn't do anything very useful on its own, but it is needed if you want to produce maps of species richness at the 1km square level.</em></p>"},"id":"52074842-f2b4-4d32-96aa-e3ef9dad0856","isHidden":false,"type":"text"},{"content":{"level":"h3","text":"Sites and Species 1k"},"id":"fc450927-ea34-496e-a422-5ae5879f1e6f","isHidden":false,"type":"heading"},{"content":{"code":"SELECT DISTINCT Records.[*Taxon], IIf((Len([Sites\\Default].[OSGridRef])=5) OR (Len([Sites\\Default].[OSGridRef])=6),[Sites\\Default].[OSGridRef],IIf(Len([Sites\\Default].[OSGridRef])=7,Left([Sites\\Default].[OSGridRef],3) & Mid([Sites\\Default].[OSGridRef],5,2),IIf(Len([Sites\\Default].[OSGridRef])=8,Left([Sites\\Default].[OSGridRef],4) & Mid([Sites\\Default].[OSGridRef],6,2),IIf(Len([Sites\\Default].[OSGridRef])=9,Left([Sites\\Default].[OSGridRef],3) & Mid([Sites\\Default].[OSGridRef],6,2),IIf(Len([Sites\\Default].[OSGridRef])=10,Left([Sites\\Default].[OSGridRef],4) & Mid([Sites\\Default].[OSGridRef],7,2),IIf(Len([Sites\\Default].[OSGridRef])=11,Left([Sites\\Default].[OSGridRef],3) & Mid([Sites\\Default].[OSGridRef],7,2),Left([Sites\\Default].[OSGridRef],4) & Mid([Sites\\Default].[OSGridRef],8,2))))))) AS 1kSquare\n\nFROM (Records INNER JOIN [Sites\\Default] ON Records.[*Site]=[Sites\\Default].[_guk]) INNER JOIN [Taxa\\Default] ON Records.[*Taxon]=[Taxa\\Default].[_guk]\n\nWHERE ([Sites\\Default].[OSGridref] Not Like \"??##?\") AND (Len([Sites\\Default].[OSGridref])>4);","language":"text"},"id":"8ee3c74d-fcfb-4ce5-b5a9-0fff8c609b8f","isHidden":false,"type":"code"}],"id":"88224a75-317e-417b-8c4e-b0c09abe8a90","width":"1/1"}],"id":"489ff1bd-8a8f-4cdb-ac92-a4b9e3d36e19"}]

----

Description: An introduction of custom analysis queries in MapMate.

----

Audiences: Vice County Recorders, Recorders

----

Requirements: 

----

Reviseddate: 

----

Related: 

----

Uuid: dx2AoZaLBFMcHEi4